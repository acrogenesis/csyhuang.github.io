<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://lanyon.getpoole.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://lanyon.getpoole.com/" rel="alternate" type="text/html" /><updated>2017-11-20T23:36:05-06:00</updated><id>http://lanyon.getpoole.com/</id><title type="html">Shao Ying (Clare) Huang</title><subtitle>PhD in Geophysical Sciences in UChicago. Love coding, music and writing.</subtitle><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><entry><title type="html">My python library updated to v0.2.0!</title><link href="http://lanyon.getpoole.com/2017/11/20/significant-update-to-v0-2-0/" rel="alternate" type="text/html" title="My python library updated to v0.2.0!" /><published>2017-11-20T00:00:00-06:00</published><updated>2017-11-20T00:00:00-06:00</updated><id>http://lanyon.getpoole.com/2017/11/20/significant-update-to-v0-2-0</id><content type="html" xml:base="http://lanyon.getpoole.com/2017/11/20/significant-update-to-v0-2-0/">&lt;p&gt;I have updated my python library &lt;a href=&quot;http://github.com/csyhuang/hn2016_falwa&quot;&gt;hn2016_falwa&lt;/a&gt; to 
v0.2.0 (see &lt;a href=&quot;https://github.com/csyhuang/hn2016_falwa/releases/tag/v0.2.0&quot;&gt;release note&lt;/a&gt;! Now 
it includes functions to compute the contribution of non-conservative forces to wave activity.&lt;/p&gt;

&lt;p&gt;Moreover, the &lt;a href=&quot;http://hn2016-falwa.readthedocs.io/en/latest/&quot;&gt;documentation page&lt;/a&gt; generated 
with Sphinx is now hosted on readthedocs.org! Check it out!&lt;/p&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><category term="research" /><summary type="html">I have updated my python library hn2016_falwa to v0.2.0 (see release note! Now it includes functions to compute the contribution of non-conservative forces to wave activity. Moreover, the documentation page generated with Sphinx is now hosted on readthedocs.org! Check it out!</summary></entry><entry><title type="html">Wrapping Fortrain Codes in Python</title><link href="http://lanyon.getpoole.com/2017/11/07/f2py-on-mac/" rel="alternate" type="text/html" title="Wrapping Fortrain Codes in Python" /><published>2017-11-07T00:00:00-06:00</published><updated>2017-11-07T00:00:00-06:00</updated><id>http://lanyon.getpoole.com/2017/11/07/f2py-on-mac</id><content type="html" xml:base="http://lanyon.getpoole.com/2017/11/07/f2py-on-mac/">&lt;p&gt;To start with, the &lt;a href=&quot;https://docs.scipy.org/doc/numpy-dev/f2py/getting-started.html&quot;&gt;documentation in Numpy&lt;/a&gt; explains how we can wrap fortran code in python using f2py.&lt;/p&gt;

&lt;p&gt;You need a fortran compiler to run f2py. I’ve found a &lt;a href=&quot;http://hpc.sourceforge.net/&quot;&gt;pre-compiled version of GCC&lt;/a&gt; readily installed on Mac OS X.&lt;/p&gt;

&lt;p&gt;(To be continued)&lt;/p&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><category term="se" /><summary type="html">To start with, the documentation in Numpy explains how we can wrap fortran code in python using f2py. You need a fortran compiler to run f2py. I’ve found a pre-compiled version of GCC readily installed on Mac OS X. (To be continued)</summary></entry><entry><title type="html">Compiling tensorflow on Mac with SSE, AVX, FMA etc.</title><link href="http://lanyon.getpoole.com/2017/11/05/tensorflow-on-mac/" rel="alternate" type="text/html" title="Compiling tensorflow on Mac with SSE, AVX, FMA etc." /><published>2017-11-05T00:00:00-05:00</published><updated>2017-11-05T00:00:00-05:00</updated><id>http://lanyon.getpoole.com/2017/11/05/tensorflow-on-mac</id><content type="html" xml:base="http://lanyon.getpoole.com/2017/11/05/tensorflow-on-mac/">&lt;p&gt;(Ideally, I shall run tensorflow somewhere else rather than on my MacBook.)&lt;/p&gt;

&lt;p&gt;When I install keras with Anaconda on my Mac OS X, with tensorflow as the backend, the following warning comes up when
 running the sample script:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To use those instructions (&lt;em&gt;SSE4.1 SSE4.2 AVX AVX2 FMA&lt;/em&gt;), tensorflow has to be compiled from source. The instructions are available &lt;a href=&quot;https://www.tensorflow.org/install/install_sources&quot;&gt;here&lt;/a&gt;. 
Using the following command to build the source:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bazel build -c opt --copt&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-march&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;native --copt&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-mfpmath&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;both --config&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cuda -k //tensorflow/tools/pip_package:build_pip_package
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I got the following error:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Problem with java installation: couldn't find/access rt.jar in /Library/Java/JavaVirtualMachines/jdk-9.0.1.jdk/Contents/Home
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It happens that &lt;em&gt;rt.jar&lt;/em&gt; is not present in Java 9. To solve it, install a version of Java 8:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew cask install caskroom/versions/java8
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;and then specify the path of Java 8:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;/usr/libexec/java_home -v 1.8.0_152&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Afterwards, I try to build tensorflow from source again, and it successfully includes the instructions above.&lt;/p&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><category term="setup" /><summary type="html">(Ideally, I shall run tensorflow somewhere else rather than on my MacBook.) When I install keras with Anaconda on my Mac OS X, with tensorflow as the backend, the following warning comes up when running the sample script: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA To use those instructions (SSE4.1 SSE4.2 AVX AVX2 FMA), tensorflow has to be compiled from source. The instructions are available here. Using the following command to build the source: bazel build -c opt --copt=-march=native --copt=-mfpmath=both --config=cuda -k //tensorflow/tools/pip_package:build_pip_package I got the following error: Problem with java installation: couldn't find/access rt.jar in /Library/Java/JavaVirtualMachines/jdk-9.0.1.jdk/Contents/Home It happens that rt.jar is not present in Java 9. To solve it, install a version of Java 8: brew cask install caskroom/versions/java8 and then specify the path of Java 8: export JAVA_HOME=$(/usr/libexec/java_home -v 1.8.0_152) Afterwards, I try to build tensorflow from source again, and it successfully includes the instructions above.</summary></entry><entry><title type="html">Setting up MySQL / access with python on Mac OS</title><link href="http://lanyon.getpoole.com/2017/09/09/install-mysql/" rel="alternate" type="text/html" title="Setting up MySQL / access with python on Mac OS" /><published>2017-09-09T00:00:00-05:00</published><updated>2017-09-09T00:00:00-05:00</updated><id>http://lanyon.getpoole.com/2017/09/09/install-mysql</id><content type="html" xml:base="http://lanyon.getpoole.com/2017/09/09/install-mysql/">&lt;p&gt;Today I wanted to setup an automated kickstarter scraper on &lt;a href=&quot;http://pythonanywhere.com&quot;&gt;Python Anywhere&lt;/a&gt; but realized that 
only MySQL is freely supported there (while I’ve been using PostgreSQL). So, a time to switch?&lt;/p&gt;

&lt;p&gt;Here is how I install MySQL on my Mac and have it accessed with &lt;em&gt;SQLAlchemy&lt;/em&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download and install &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.6/en/osx-installation-pkg.html&quot;&gt;MySQL from Oracle&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Go to &lt;em&gt;System Preferences&lt;/em&gt; to start the MySQL server.&lt;/li&gt;
  &lt;li&gt;Navigate to the bin directory and login with the temporary password shown at the end of the installation:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/mysql/bin
./mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create another set of &lt;em&gt;username&lt;/em&gt; and &lt;em&gt;password&lt;/em&gt; that you use instead of &lt;em&gt;root&lt;/em&gt;.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE USER username@localhost IDENTIFIED BY &lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;I have installed &lt;em&gt;pymysql&lt;/em&gt; and &lt;em&gt;sqlalchemy&lt;/em&gt; in Python to access the MySQL database. To access the database:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_engine&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy_utils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_database&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# dbname is the database name&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# user_id and user_password are what you put in above&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mysql+pymysql://&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s@localhost:3306/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&lt;/span&gt;
                       &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;create_database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;			&lt;span class=&quot;c&quot;&gt;# Create database if it doesn't exist.&lt;/span&gt;
    
&lt;span class=&quot;n&quot;&gt;con&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Connect to the MySQL engine&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'new_table'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DROP TABLE IF EXISTS new_table;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Drop if such table exist&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;con&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Executing SQL commands is rather easy by using:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;con&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Enjoy! :)&lt;/p&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><category term="setup" /><summary type="html">Today I wanted to setup an automated kickstarter scraper on Python Anywhere but realized that only MySQL is freely supported there (while I’ve been using PostgreSQL). So, a time to switch? Here is how I install MySQL on my Mac and have it accessed with SQLAlchemy: Download and install MySQL from Oracle. Go to System Preferences to start the MySQL server. Navigate to the bin directory and login with the temporary password shown at the end of the installation: cd /usr/local/mysql/bin ./mysql -u root -p Create another set of username and password that you use instead of root. CREATE USER username@localhost IDENTIFIED BY 'password' I have installed pymysql and sqlalchemy in Python to access the MySQL database. To access the database: from sqlalchemy import create_engine from sqlalchemy_utils import database_exists, create_database # dbname is the database name # user_id and user_password are what you put in above engine = create_engine(&quot;mysql+pymysql://%s:%s@localhost:3306/%s&quot; %(user_id,user_password,dbname),echo=False) if not database_exists(engine.url): create_database(engine.url) # Create database if it doesn't exist. con = engine.connect() # Connect to the MySQL engine table_name = 'new_table' command = &quot;DROP TABLE IF EXISTS new_table;&quot; # Drop if such table exist con.execute(command) Executing SQL commands is rather easy by using: con.execute(command) Enjoy! :)</summary></entry><entry><title type="html">Software Engineering Project Note-taking</title><link href="http://lanyon.getpoole.com/2017/08/18/software-engineering-project-note-taking/" rel="alternate" type="text/html" title="Software Engineering Project Note-taking" /><published>2017-08-18T00:00:00-05:00</published><updated>2017-08-18T00:00:00-05:00</updated><id>http://lanyon.getpoole.com/2017/08/18/software-engineering-project-note-taking</id><content type="html" xml:base="http://lanyon.getpoole.com/2017/08/18/software-engineering-project-note-taking/">&lt;p&gt;Learnt a lot from peers today! :D Here are quick notes on packages they have used for their software engineering project:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt;: You store your docker images there.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;DigitalOcean&lt;/a&gt;: The docker images are pulled there, together with the images.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=LQ6pFgQXQ0Q&quot;&gt;Sphinx tutorial&lt;/a&gt;: Useful instructions how to set Python documentation up&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/erocarrera/pydot&quot;&gt;pydot&lt;/a&gt; and &lt;a href=&quot;http://www.graphviz.org/&quot;&gt;graphviz&lt;/a&gt;: Draw graphs of objects and arrows&lt;/p&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><category term="se" /><summary type="html">Learnt a lot from peers today! :D Here are quick notes on packages they have used for their software engineering project: Docker Hub: You store your docker images there. DigitalOcean: The docker images are pulled there, together with the images. Sphinx tutorial: Useful instructions how to set Python documentation up pydot and graphviz: Draw graphs of objects and arrows</summary></entry><entry><title type="html">Free Online Deep Learning Resources</title><link href="http://lanyon.getpoole.com/2017/08/10/deep-learning-resources/" rel="alternate" type="text/html" title="Free Online Deep Learning Resources" /><published>2017-08-10T00:00:00-05:00</published><updated>2017-08-10T00:00:00-05:00</updated><id>http://lanyon.getpoole.com/2017/08/10/deep-learning-resources</id><content type="html" xml:base="http://lanyon.getpoole.com/2017/08/10/deep-learning-resources/">&lt;p&gt;These are resources related to deep learning from conversation with friends:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/songrotek/Deep-Learning-Papers-Reading-Roadmap&quot;&gt;Deep Learning Paper Reading Roadmap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://neuralnetworksanddeeplearning.com/&quot;&gt;Neural Networks and Deep Learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Books introduced in newsletter of Data Science Central:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.deeplearningbook.org/&quot;&gt;Deep Learning Book&lt;/a&gt;&lt;/p&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><category term="ds" /><summary type="html">These are resources related to deep learning from conversation with friends: Deep Learning Paper Reading Roadmap Neural Networks and Deep Learning Books introduced in newsletter of Data Science Central: Deep Learning Book</summary></entry><entry><title type="html">Learning html, CSS, javascripts and jinja2</title><link href="http://lanyon.getpoole.com/2017/06/24/learning-html-css-js-jinja2/" rel="alternate" type="text/html" title="Learning html, CSS, javascripts and jinja2" /><published>2017-06-24T00:00:00-05:00</published><updated>2017-06-24T00:00:00-05:00</updated><id>http://lanyon.getpoole.com/2017/06/24/learning-html-css-js-jinja2</id><content type="html" xml:base="http://lanyon.getpoole.com/2017/06/24/learning-html-css-js-jinja2/">&lt;p&gt;On my way building a webapp with python and Flask, I need to include input options to make the app interactive. Here are some great sites I’ve learnt things from:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://w3schools.com&quot;&gt;w3schools.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jqueryui.com/datepicker/&quot;&gt;jQuery user interface&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jinja.pocoo.org/docs/2.9/&quot;&gt;Jinja2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://css-tricks.com/gallery/&quot;&gt;CSS-Tricks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://shapebootstrap.net/free-templates&quot;&gt;ShapeBootstrap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More updates later.&lt;/p&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><summary type="html">On my way building a webapp with python and Flask, I need to include input options to make the app interactive. Here are some great sites I’ve learnt things from: w3schools.com jQuery user interface Jinja2 CSS-Tricks ShapeBootstrap More updates later.</summary></entry><entry><title type="html">Setting up ubuntu on AWS</title><link href="http://lanyon.getpoole.com/2017/06/11/setup-ubuntu-aws/" rel="alternate" type="text/html" title="Setting up ubuntu on AWS" /><published>2017-06-11T00:00:00-05:00</published><updated>2017-06-11T00:00:00-05:00</updated><id>http://lanyon.getpoole.com/2017/06/11/setup-ubuntu-aws</id><content type="html" xml:base="http://lanyon.getpoole.com/2017/06/11/setup-ubuntu-aws/">&lt;p&gt;&lt;a href=&quot;(https://stackoverflow.com/questions/32389599/anaconda-importerror-libsm-so-6-cannot-open-shared-object-file-no-such-file-o)&quot;&gt;Solution&lt;/a&gt; for the error &lt;em&gt;libSM.so.6: cannot open shared object file&lt;/em&gt;.&lt;/p&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><category term="setup" /><summary type="html">Solution for the error libSM.so.6: cannot open shared object file.</summary></entry><entry><title type="html">Python packages for Sentiment Analysis</title><link href="http://lanyon.getpoole.com/2017/06/10/Python-packages-for-Sentiment-Analysis/" rel="alternate" type="text/html" title="Python packages for Sentiment Analysis" /><published>2017-06-10T00:00:00-05:00</published><updated>2017-06-10T00:00:00-05:00</updated><id>http://lanyon.getpoole.com/2017/06/10/Python-packages-for-Sentiment-Analysis</id><content type="html" xml:base="http://lanyon.getpoole.com/2017/06/10/Python-packages-for-Sentiment-Analysis/">&lt;p&gt;On top of utilities in &lt;em&gt;nltk.sentiment&lt;/em&gt;, there are also some packages for training and combining classifiers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/japerk/nltk-trainer&quot;&gt;NLTK-trainer&lt;/a&gt; by &lt;a href=&quot;https://www.linkedin.com/in/jacobperkins&quot;&gt;Jacob Perkins&lt;/a&gt;, accompanied by the &lt;a href=&quot;https://github.com/japerk/nltk3-cookbook&quot;&gt;NLTK-cookbook&lt;/a&gt; he wrote.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/clips/pattern&quot;&gt;Pattern.en&lt;/a&gt; developed by the &lt;a href=&quot;http://www.clips.ua.ac.be/&quot;&gt;Computational Linguistics Research Group&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Data sets for training a sentiment classifier: &lt;a href=&quot;https://www.cs.cornell.edu/people/pabo/movie-review-data/&quot;&gt;Movie Review Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(More to be updated)&lt;/p&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><category term="ds" /><summary type="html">On top of utilities in nltk.sentiment, there are also some packages for training and combining classifiers:</summary></entry><entry><title type="html">Published a paper on Local Wave Activity Budget!</title><link href="http://lanyon.getpoole.com/2017/05/15/LWA-budget-paper-published/" rel="alternate" type="text/html" title="Published a paper on Local Wave Activity Budget!" /><published>2017-05-15T00:00:00-05:00</published><updated>2017-05-15T00:00:00-05:00</updated><id>http://lanyon.getpoole.com/2017/05/15/LWA-budget-paper-published</id><content type="html" xml:base="http://lanyon.getpoole.com/2017/05/15/LWA-budget-paper-published/">&lt;p&gt;I’ve published a &lt;a href=&quot;http://onlinelibrary.wiley.com/doi/10.1002/2017GL073760/abstract;jsessionid=2EEA61FFE129914E672C6F10497975B2.f02t02&quot;&gt;new paper&lt;/a&gt; on Geophysical Research Letters!&lt;/p&gt;

&lt;p&gt;Climate dynamicists have derived a conservation relation based on &lt;em&gt;small-amplitude wave assumption&lt;/em&gt; for wave activity (&lt;em&gt;A&lt;/em&gt;) that describes evolution of Rossby wave packets:&lt;br /&gt;
&lt;img src=&quot;/assets/img/simple-wave-activity-equation.png&quot; alt=&quot;Wave activity flux equation&quot; style=&quot;width: 250px;&quot; /&gt;&lt;br /&gt;
However, only the wave activity flux vector on the RHS has been used to diagnose realistic climate data. &lt;em&gt;A&lt;/em&gt; is ill-defined when wave amplitude is large (i.e. ‘of finite-amplitude’).  In &lt;a href=&quot;http://journals.ametsoc.org/doi/abs/10.1175/JAS-D-15-0194.1&quot;&gt;Huang &amp;amp; Nakamura (2016)&lt;/a&gt;, we introduced a new theory of wave activity applicable to large waves. We thus can obtain a well-defined &lt;em&gt;A&lt;/em&gt; even from real data. This is the &lt;strong&gt;first piece of work that compare LHS and RHS of the conservative part of equation above for reanalysis data&lt;/strong&gt;. This advance allows us to estimate the overall non-conservative contribution (natural/human-induced forcings) to the observed flow.&lt;/p&gt;

&lt;p&gt;Major results include:&lt;/p&gt;

&lt;p&gt;(1) Our estimation of transient wave activity (top panel) is consistent with &lt;a href=&quot;http://journals.ametsoc.org/doi/abs/10.1175/1520-0469%281986%29043%3C1657%3ATDPOTQ%3E2.0.CO%3B2&quot;&gt;previous work&lt;/a&gt; (bottom panel, assuming small-amplitude waves) and is better behaving.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Revise_fig2.png&quot; alt=&quot;Comparison with previous work&quot; style=&quot;width: \textwidth;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(2) We can break down the local wave activity budget at seasonal time-scale.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/img/Revise_fig3.png&quot; alt=&quot;Wave activity flux equation&quot; style=&quot;width: \textwidth;&quot; /&gt;  
&lt;/p&gt;

&lt;p&gt;(3) We can also break down the budget in synoptic time-scale with the use of co-spectral analysis.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/img/Revise_fig4.png&quot; alt=&quot;Wave activity flux equation&quot; style=&quot;width: \textwidth;&quot; /&gt;
&lt;/p&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><category term="research" /><summary type="html">I’ve published a new paper on Geophysical Research Letters! Climate dynamicists have derived a conservation relation based on small-amplitude wave assumption for wave activity (A) that describes evolution of Rossby wave packets: However, only the wave activity flux vector on the RHS has been used to diagnose realistic climate data. A is ill-defined when wave amplitude is large (i.e. ‘of finite-amplitude’). In Huang &amp;amp; Nakamura (2016), we introduced a new theory of wave activity applicable to large waves. We thus can obtain a well-defined A even from real data. This is the first piece of work that compare LHS and RHS of the conservative part of equation above for reanalysis data. This advance allows us to estimate the overall non-conservative contribution (natural/human-induced forcings) to the observed flow. Major results include: (1) Our estimation of transient wave activity (top panel) is consistent with previous work (bottom panel, assuming small-amplitude waves) and is better behaving. (2) We can break down the local wave activity budget at seasonal time-scale. (3) We can also break down the budget in synoptic time-scale with the use of co-spectral analysis.</summary></entry></feed>