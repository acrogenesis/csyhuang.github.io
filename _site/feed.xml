<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-08-18T15:51:54-04:00</updated><id>http://localhost:4000/</id><title type="html">Shao Ying (Clare) Huang</title><subtitle>PhD candidate (Atmospheric Sciences) in UChicago. Love coding, music and writing.</subtitle><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><entry><title type="html">Software Engineering Project Note-taking</title><link href="http://localhost:4000/2017/08/18/software-engineering-project-note-taking/" rel="alternate" type="text/html" title="Software Engineering Project Note-taking" /><published>2017-08-18T00:00:00-04:00</published><updated>2017-08-18T00:00:00-04:00</updated><id>http://localhost:4000/2017/08/18/software-engineering-project-note-taking</id><content type="html" xml:base="http://localhost:4000/2017/08/18/software-engineering-project-note-taking/">&lt;p&gt;Learnt a lot from peers today! :D Here are quick notes on packages they have used for their software engineering project:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt;: You store your docker images there.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;DigitalOcean&lt;/a&gt;: The docker images are pulled there, together with the images.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=LQ6pFgQXQ0Q&quot;&gt;Sphinx tutorial&lt;/a&gt;: Useful instructions how to set Python documentation up&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/erocarrera/pydot&quot;&gt;pydot&lt;/a&gt; and &lt;a href=&quot;http://www.graphviz.org/&quot;&gt;graphviz&lt;/a&gt;: Draw graphs of objects and arrows&lt;/p&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><summary type="html">Learnt a lot from peers today! :D Here are quick notes on packages they have used for their software engineering project: Docker Hub: You store your docker images there. DigitalOcean: The docker images are pulled there, together with the images. Sphinx tutorial: Useful instructions how to set Python documentation up pydot and graphviz: Draw graphs of objects and arrows</summary></entry><entry><title type="html">Free Online Deep Learning Resources</title><link href="http://localhost:4000/2017/08/10/deep-learning-resources/" rel="alternate" type="text/html" title="Free Online Deep Learning Resources" /><published>2017-08-10T00:00:00-04:00</published><updated>2017-08-10T00:00:00-04:00</updated><id>http://localhost:4000/2017/08/10/deep-learning-resources</id><content type="html" xml:base="http://localhost:4000/2017/08/10/deep-learning-resources/">&lt;p&gt;These are resources related to deep learning from conversation with friends:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/songrotek/Deep-Learning-Papers-Reading-Roadmap&quot;&gt;Deep Learning Paper Reading Roadmap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://neuralnetworksanddeeplearning.com/&quot;&gt;Neural Networks and Deep Learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Books introduced in newsletter of Data Science Central:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.deeplearningbook.org/&quot;&gt;Deep Learning Book&lt;/a&gt;&lt;/p&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><summary type="html">These are resources related to deep learning from conversation with friends: Deep Learning Paper Reading Roadmap Neural Networks and Deep Learning Books introduced in newsletter of Data Science Central: Deep Learning Book</summary></entry><entry><title type="html">Learning html, CSS, javascripts and jinja2</title><link href="http://localhost:4000/2017/06/24/learning-html-css-js-jinja2/" rel="alternate" type="text/html" title="Learning html, CSS, javascripts and jinja2" /><published>2017-06-24T00:00:00-04:00</published><updated>2017-06-24T00:00:00-04:00</updated><id>http://localhost:4000/2017/06/24/learning-html-css-js-jinja2</id><content type="html" xml:base="http://localhost:4000/2017/06/24/learning-html-css-js-jinja2/">&lt;p&gt;On my way building a webapp with python and Flask, I need to include input options to make the app interactive. Here are some great sites I’ve learnt things from:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://w3schools.com&quot;&gt;w3schools.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jqueryui.com/datepicker/&quot;&gt;jQuery user interface&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jinja.pocoo.org/docs/2.9/&quot;&gt;Jinja2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://css-tricks.com/gallery/&quot;&gt;CSS-Tricks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://shapebootstrap.net/free-templates&quot;&gt;ShapeBootstrap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More updates later.&lt;/p&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><summary type="html">On my way building a webapp with python and Flask, I need to include input options to make the app interactive. Here are some great sites I’ve learnt things from: w3schools.com jQuery user interface Jinja2 CSS-Tricks ShapeBootstrap More updates later.</summary></entry><entry><title type="html">Setting up ubuntu on AWS</title><link href="http://localhost:4000/2017/06/11/setup-ubuntu-aws/" rel="alternate" type="text/html" title="Setting up ubuntu on AWS" /><published>2017-06-11T00:00:00-04:00</published><updated>2017-06-11T00:00:00-04:00</updated><id>http://localhost:4000/2017/06/11/setup-ubuntu-aws</id><content type="html" xml:base="http://localhost:4000/2017/06/11/setup-ubuntu-aws/">&lt;p&gt;&lt;a href=&quot;(https://stackoverflow.com/questions/32389599/anaconda-importerror-libsm-so-6-cannot-open-shared-object-file-no-such-file-o)&quot;&gt;Solution&lt;/a&gt; for the error &lt;em&gt;libSM.so.6: cannot open shared object file&lt;/em&gt;.&lt;/p&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><summary type="html">Solution for the error libSM.so.6: cannot open shared object file.</summary></entry><entry><title type="html">Python packages for Sentiment Analysis</title><link href="http://localhost:4000/2017/06/10/Python-packages-for-Sentiment-Analysis/" rel="alternate" type="text/html" title="Python packages for Sentiment Analysis" /><published>2017-06-10T00:00:00-04:00</published><updated>2017-06-10T00:00:00-04:00</updated><id>http://localhost:4000/2017/06/10/Python-packages-for-Sentiment-Analysis</id><content type="html" xml:base="http://localhost:4000/2017/06/10/Python-packages-for-Sentiment-Analysis/">&lt;p&gt;On top of utilities in &lt;em&gt;nltk.sentiment&lt;/em&gt;, there are also some packages for training and combining classifiers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/japerk/nltk-trainer&quot;&gt;NLTK-trainer&lt;/a&gt; by &lt;a href=&quot;https://www.linkedin.com/in/jacobperkins&quot;&gt;Jacob Perkins&lt;/a&gt;, accompanied by the &lt;a href=&quot;https://github.com/japerk/nltk3-cookbook&quot;&gt;NLTK-cookbook&lt;/a&gt; he wrote.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/clips/pattern&quot;&gt;Pattern.en&lt;/a&gt; developed by the &lt;a href=&quot;http://www.clips.ua.ac.be/&quot;&gt;Computational Linguistics Research Group&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Data sets for training a sentiment classifier: &lt;a href=&quot;https://www.cs.cornell.edu/people/pabo/movie-review-data/&quot;&gt;Movie Review Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(More to be updated)&lt;/p&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><summary type="html">On top of utilities in nltk.sentiment, there are also some packages for training and combining classifiers:</summary></entry><entry><title type="html">Published a paper on Local Wave Activity Budget!</title><link href="http://localhost:4000/2017/05/15/LWA-budget-paper-published/" rel="alternate" type="text/html" title="Published a paper on Local Wave Activity Budget!" /><published>2017-05-15T00:00:00-04:00</published><updated>2017-05-15T00:00:00-04:00</updated><id>http://localhost:4000/2017/05/15/LWA-budget-paper-published</id><content type="html" xml:base="http://localhost:4000/2017/05/15/LWA-budget-paper-published/">&lt;p&gt;I’ve published a &lt;a href=&quot;http://onlinelibrary.wiley.com/doi/10.1002/2017GL073760/abstract;jsessionid=2EEA61FFE129914E672C6F10497975B2.f02t02&quot;&gt;new paper&lt;/a&gt; on Geophysical Research Letters!&lt;/p&gt;

&lt;p&gt;Climate dynamicists have derived a conservation relation based on &lt;em&gt;small-amplitude wave assumption&lt;/em&gt; for wave activity (&lt;em&gt;A&lt;/em&gt;) that describes evolution of Rossby wave packets:&lt;br /&gt;
&lt;img src=&quot;/assets/img/simple-wave-activity-equation.png&quot; alt=&quot;Wave activity flux equation&quot; style=&quot;width: 250px;&quot; /&gt;&lt;br /&gt;
However, only the wave activity flux vector on the RHS has been used to diagnose realistic climate data. &lt;em&gt;A&lt;/em&gt; is ill-defined when wave amplitude is large (i.e. ‘of finite-amplitude’).  In &lt;a href=&quot;http://journals.ametsoc.org/doi/abs/10.1175/JAS-D-15-0194.1&quot;&gt;Huang &amp;amp; Nakamura (2016)&lt;/a&gt;, we introduced a new theory of wave activity applicable to large waves. We thus can obtain a well-defined &lt;em&gt;A&lt;/em&gt; even from real data. This is the &lt;strong&gt;first piece of work that compare LHS and RHS of the conservative part of equation above for reanalysis data&lt;/strong&gt;. This advance allows us to estimate the overall non-conservative contribution (natural/human-induced forcings) to the observed flow.&lt;/p&gt;

&lt;p&gt;Major results include:&lt;/p&gt;

&lt;p&gt;(1) Our estimation of transient wave activity (top panel) is consistent with &lt;a href=&quot;http://journals.ametsoc.org/doi/abs/10.1175/1520-0469%281986%29043%3C1657%3ATDPOTQ%3E2.0.CO%3B2&quot;&gt;previous work&lt;/a&gt; (bottom panel, assuming small-amplitude waves) and is better behaving.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Revise_fig2.png&quot; alt=&quot;Comparison with previous work&quot; style=&quot;width: \textwidth;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(2) We can break down the local wave activity budget at seasonal time-scale.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/img/Revise_fig3.png&quot; alt=&quot;Wave activity flux equation&quot; style=&quot;width: \textwidth;&quot; /&gt;  
&lt;/p&gt;

&lt;p&gt;(3) We can also break down the budget in synoptic time-scale with the use of co-spectral analysis.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/img/Revise_fig4.png&quot; alt=&quot;Wave activity flux equation&quot; style=&quot;width: \textwidth;&quot; /&gt;
&lt;/p&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><summary type="html">I’ve published a new paper on Geophysical Research Letters! Climate dynamicists have derived a conservation relation based on small-amplitude wave assumption for wave activity (A) that describes evolution of Rossby wave packets: However, only the wave activity flux vector on the RHS has been used to diagnose realistic climate data. A is ill-defined when wave amplitude is large (i.e. ‘of finite-amplitude’). In Huang &amp;amp; Nakamura (2016), we introduced a new theory of wave activity applicable to large waves. We thus can obtain a well-defined A even from real data. This is the first piece of work that compare LHS and RHS of the conservative part of equation above for reanalysis data. This advance allows us to estimate the overall non-conservative contribution (natural/human-induced forcings) to the observed flow. Major results include: (1) Our estimation of transient wave activity (top panel) is consistent with previous work (bottom panel, assuming small-amplitude waves) and is better behaving. (2) We can break down the local wave activity budget at seasonal time-scale. (3) We can also break down the budget in synoptic time-scale with the use of co-spectral analysis.</summary></entry><entry><title type="html">Switching to Jekyll</title><link href="http://localhost:4000/2017/05/12/switching-to-jekyll/" rel="alternate" type="text/html" title="Switching to Jekyll" /><published>2017-05-12T00:00:00-04:00</published><updated>2017-05-12T00:00:00-04:00</updated><id>http://localhost:4000/2017/05/12/switching-to-jekyll</id><content type="html" xml:base="http://localhost:4000/2017/05/12/switching-to-jekyll/">&lt;p&gt;I’m switching from a traditional html webpage builder to Jekyll user! Hope to update more often!&lt;/p&gt;

&lt;p&gt;I set up Jekyll in my Mac OS X with &lt;a href=&quot;http://brew.sh&quot;&gt;homebrew&lt;/a&gt;,  &lt;a href=&quot;https://github.com/rbenv/rbenv&quot;&gt;rbenv&lt;/a&gt; and &lt;a href=&quot;https://rubygems.org/&quot;&gt;RubyGems&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To see how to set jekyll up on Windows, refer to my &lt;a href=&quot;/2017/02/12/jekyll-on-windows/&quot;&gt;older post&lt;/a&gt;.&lt;/p&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><summary type="html">I’m switching from a traditional html webpage builder to Jekyll user! Hope to update more often! I set up Jekyll in my Mac OS X with homebrew, rbenv and RubyGems. To see how to set jekyll up on Windows, refer to my older post.</summary></entry><entry><title type="html">Installation of Jekyll on Windows 10</title><link href="http://localhost:4000/2017/02/12/jekyll-on-windows/" rel="alternate" type="text/html" title="Installation of Jekyll on Windows 10" /><published>2017-02-12T00:00:00-05:00</published><updated>2017-02-12T00:00:00-05:00</updated><id>http://localhost:4000/2017/02/12/jekyll-on-windows</id><content type="html" xml:base="http://localhost:4000/2017/02/12/jekyll-on-windows/">&lt;p&gt;Below are the procedures I used to install Jekyll with problem solvers:&lt;/p&gt;

&lt;p&gt;Main reference sites:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/windows/&quot;&gt;Jekyll on Windows&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://davidburela.wordpress.com/2015/11/28/easily-install-jekyll-on-windows-with-3-command-prompt-entries-and-chocolatey/&quot;&gt;Easily install Jekyll on Windows with 3 command prompt entries and Chocolatey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Procedures:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Open Powershell&lt;/li&gt;
  &lt;li&gt;Run Powershell as administrator: [&lt;a href=&quot;http://stackoverflow.com/questions/7690994/powershell-running-a-command-as-administrator&quot;&gt;Reference&lt;/a&gt;]
    &lt;blockquote&gt;
      &lt;p&gt;Start-Process powershell -Verb runAs&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Change execution policy to enable installation of Chocolatey (a package manager): [&lt;a href=&quot;http://stackoverflow.com/questions/4037939/powershell-says-execution-of-scripts-is-disabled-on-this-system&quot;&gt;Reference&lt;/a&gt;]
    &lt;blockquote&gt;
      &lt;p&gt;Set-ExecutionPolicy RemoteSigned&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Installing Chocolatey: [&lt;a href=&quot;https://chocolatey.org/install&quot;&gt;Reference&lt;/a&gt;]
    &lt;blockquote&gt;
      &lt;p&gt;iwr https://chocolatey.org/install.ps1 -UseBasicParsing | iex&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Update the certificate to install ruby: [&lt;a href=&quot;http://guides.rubygems.org/ssl-certificate-update/&quot;&gt;Reference&lt;/a&gt;]&lt;br /&gt;
&lt;a href=&quot;http://guides.rubygems.org/ssl-certificate-update/&quot;&gt;http://guides.rubygems.org/ssl-certificate-update/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install ruby:
    &lt;blockquote&gt;
      &lt;p&gt;choco install ruby -y&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Close the window and open a new command prompt with Administrator access (i.e. step 2)&lt;/li&gt;
  &lt;li&gt;Install gem bundler
    &lt;blockquote&gt;
      &lt;p&gt;gem install bundler&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Install Jekyll
    &lt;blockquote&gt;
      &lt;p&gt;gem install jekyll&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Done :)&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><summary type="html">Below are the procedures I used to install Jekyll with problem solvers: Main reference sites: Jekyll on Windows Easily install Jekyll on Windows with 3 command prompt entries and Chocolatey Procedures: Open Powershell Run Powershell as administrator: [Reference] Start-Process powershell -Verb runAs Change execution policy to enable installation of Chocolatey (a package manager): [Reference] Set-ExecutionPolicy RemoteSigned Installing Chocolatey: [Reference] iwr https://chocolatey.org/install.ps1 -UseBasicParsing | iex Update the certificate to install ruby: [Reference] http://guides.rubygems.org/ssl-certificate-update/ Install ruby: choco install ruby -y Close the window and open a new command prompt with Administrator access (i.e. step 2) Install gem bundler gem install bundler Install Jekyll gem install jekyll Done :)</summary></entry><entry><title type="html">Installing Python Library for downloading ERA-Interim Data</title><link href="http://localhost:4000/2016/06/13/ECMWF-download/" rel="alternate" type="text/html" title="Installing Python Library for downloading ERA-Interim Data" /><published>2016-06-13T00:00:00-04:00</published><updated>2016-06-13T00:00:00-04:00</updated><id>http://localhost:4000/2016/06/13/ECMWF-download</id><content type="html" xml:base="http://localhost:4000/2016/06/13/ECMWF-download/">&lt;h3 id=&quot;update-the-ecmwf-api-client-is-now-available-on-pypi&quot;&gt;Update: The ECMWF api client is now available on pypi.&lt;/h3&gt;
&lt;p&gt;Installation (step 1-3) can be done by the command:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;pip install ecmwf-api-client&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;old-steps-1-3&quot;&gt;Old steps (1-3)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(1) Installing the package requires the python Setuptools. You can set it up locally with the command:

&amp;gt; wget https://bootstrap.pypa.io/ez_setup.py -O - | python - --user

(2) Download the Python library package and unzip it (You can do it in any directory)
&amp;gt; wget https://software.ecmwf.int/wiki/download/attachments/56664858/ecmwf-api-client-python.tgz
&amp;gt; tar zxf ecmwf-api-client-python.tgz

You shall see four items extracted:
- example.py
- ecmwfapi/__init__.py
- ecmwfapi/api.py
- setup.py

(3) In the directory with these four items, install the package with:
&amp;gt; python setup.py install --user
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(4) To use the sample script, you need an API key ( .ecmwfapirc ) placed in your home directory. You can retrieve that by logging in: https://api.ecmwf.int/v1/key/
Create a file named “.ecmwfapirc” in your home directory and put in the content shown on the page:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://api.ecmwf.int/v1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;(...)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;(...)&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(5) After doing that, in the directory with the sample script example.py, you can test the package by running it:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;python example.py&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You should see it successfully retrieves a .grib file if the package has been set up properly.&lt;/p&gt;

&lt;p&gt;(6) To download python script for retrieving ERA-Interim netCDF files, there are sample script available here (look under “Same request NetCDF format”):
[https://software.ecmwf.int/wiki/display/WEBAPI/Python+ERA-interim+examples]&lt;/p&gt;

&lt;p&gt;In fact, on the ECMWF Public Dataset web interface page you retrieve ERA-Interim data, after you select the subset of data, instead of pressing “Retrieve NetCDF”, there is another button named “View the MARS request”, and it will show how the python script for retrieving that dataset looks like.&lt;/p&gt;

&lt;p&gt;I learnt the above steps on these pages:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://software.ecmwf.int/wiki/display/WEBAPI/Access+ECMWF+Public+Datasets#AccessECMWFPublicDatasets-python&quot;&gt;ECMWF python library&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypi.python.org/pypi/setuptools&quot;&gt;Python setuptool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Shao Ying (Clare) Huang</name><email>clare1068@gmail.com</email></author><summary type="html">Update: The ECMWF api client is now available on pypi. Installation (step 1-3) can be done by the command: pip install ecmwf-api-client Old steps (1-3) (1) Installing the package requires the python Setuptools. You can set it up locally with the command: &amp;gt; wget https://bootstrap.pypa.io/ez_setup.py -O - | python - --user (2) Download the Python library package and unzip it (You can do it in any directory) &amp;gt; wget https://software.ecmwf.int/wiki/download/attachments/56664858/ecmwf-api-client-python.tgz &amp;gt; tar zxf ecmwf-api-client-python.tgz You shall see four items extracted: - example.py - ecmwfapi/__init__.py - ecmwfapi/api.py - setup.py (3) In the directory with these four items, install the package with: &amp;gt; python setup.py install --user (4) To use the sample script, you need an API key ( .ecmwfapirc ) placed in your home directory. You can retrieve that by logging in: https://api.ecmwf.int/v1/key/ Create a file named “.ecmwfapirc” in your home directory and put in the content shown on the page: { &quot;url&quot; : &quot;https://api.ecmwf.int/v1&quot;, &quot;key&quot; : &quot;(...)&quot;, &quot;email&quot; : &quot;(...)&quot; } (5) After doing that, in the directory with the sample script example.py, you can test the package by running it: python example.py You should see it successfully retrieves a .grib file if the package has been set up properly. (6) To download python script for retrieving ERA-Interim netCDF files, there are sample script available here (look under “Same request NetCDF format”): [https://software.ecmwf.int/wiki/display/WEBAPI/Python+ERA-interim+examples] In fact, on the ECMWF Public Dataset web interface page you retrieve ERA-Interim data, after you select the subset of data, instead of pressing “Retrieve NetCDF”, there is another button named “View the MARS request”, and it will show how the python script for retrieving that dataset looks like. I learnt the above steps on these pages: ECMWF python library Python setuptool</summary></entry></feed>